{"/home/travis/build/npmtest/node-npmtest-express-session/test.js":"/* istanbul instrument in package npmtest_express_session */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-session/lib.npmtest_express_session.js":"/* istanbul instrument in package npmtest_express_session */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_express_session = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_express_session = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-express-session/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-express-session && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_express_session */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_express_session\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_express_session.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_express_session.rollup.js'] =\n            local.assetsDict['/assets.npmtest_express_session.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_express_session.__dirname +\n                    '/lib.npmtest_express_session.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-session/node_modules/express-session/index.js":"/*!\r\n * express-session\r\n * Copyright(c) 2010 Sencha Inc.\r\n * Copyright(c) 2011 TJ Holowaychuk\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar cookie = require('cookie');\r\nvar crc = require('crc').crc32;\r\nvar debug = require('debug')('express-session');\r\nvar deprecate = require('depd')('express-session');\r\nvar parseUrl = require('parseurl');\r\nvar uid = require('uid-safe').sync\r\n  , onHeaders = require('on-headers')\r\n  , signature = require('cookie-signature')\r\n\r\nvar Session = require('./session/session')\r\n  , MemoryStore = require('./session/memory')\r\n  , Cookie = require('./session/cookie')\r\n  , Store = require('./session/store')\r\n\r\n// environment\r\n\r\nvar env = process.env.NODE_ENV;\r\n\r\n/**\r\n * Expose the middleware.\r\n */\r\n\r\nexports = module.exports = session;\r\n\r\n/**\r\n * Expose constructors.\r\n */\r\n\r\nexports.Store = Store;\r\nexports.Cookie = Cookie;\r\nexports.Session = Session;\r\nexports.MemoryStore = MemoryStore;\r\n\r\n/**\r\n * Warning message for `MemoryStore` usage in production.\r\n * @private\r\n */\r\n\r\nvar warning = 'Warning: connect.session() MemoryStore is not\\n'\r\n  + 'designed for a production environment, as it will leak\\n'\r\n  + 'memory, and will not scale past a single process.';\r\n\r\n/**\r\n * Node.js 0.8+ async implementation.\r\n * @private\r\n */\r\n\r\n/* istanbul ignore next */\r\nvar defer = typeof setImmediate === 'function'\r\n  ? setImmediate\r\n  : function(fn){ process.nextTick(fn.bind.apply(fn, arguments)) }\r\n\r\n/**\r\n * Setup session store with the given `options`.\r\n *\r\n * @param {Object} [options]\r\n * @param {Object} [options.cookie] Options for cookie\r\n * @param {Function} [options.genid]\r\n * @param {String} [options.name=connect.sid] Session ID cookie name\r\n * @param {Boolean} [options.proxy]\r\n * @param {Boolean} [options.resave] Resave unmodified sessions back to the store\r\n * @param {Boolean} [options.rolling] Enable/disable rolling session expiration\r\n * @param {Boolean} [options.saveUninitialized] Save uninitialized sessions to the store\r\n * @param {String|Array} [options.secret] Secret for signing session ID\r\n * @param {Object} [options.store=MemoryStore] Session store\r\n * @param {String} [options.unset]\r\n * @return {Function} middleware\r\n * @public\r\n */\r\n\r\nfunction session(options) {\r\n  var opts = options || {}\r\n\r\n  // get the cookie options\r\n  var cookieOptions = opts.cookie || {}\r\n\r\n  // get the session id generate function\r\n  var generateId = opts.genid || generateSessionId\r\n\r\n  // get the session cookie name\r\n  var name = opts.name || opts.key || 'connect.sid'\r\n\r\n  // get the session store\r\n  var store = opts.store || new MemoryStore()\r\n\r\n  // get the trust proxy setting\r\n  var trustProxy = opts.proxy\r\n\r\n  // get the resave session option\r\n  var resaveSession = opts.resave;\r\n\r\n  // get the rolling session option\r\n  var rollingSessions = Boolean(opts.rolling)\r\n\r\n  // get the save uninitialized session option\r\n  var saveUninitializedSession = opts.saveUninitialized\r\n\r\n  // get the cookie signing secret\r\n  var secret = opts.secret\r\n\r\n  if (typeof generateId !== 'function') {\r\n    throw new TypeError('genid option must be a function');\r\n  }\r\n\r\n  if (resaveSession === undefined) {\r\n    deprecate('undefined resave option; provide resave option');\r\n    resaveSession = true;\r\n  }\r\n\r\n  if (saveUninitializedSession === undefined) {\r\n    deprecate('undefined saveUninitialized option; provide saveUninitialized option');\r\n    saveUninitializedSession = true;\r\n  }\r\n\r\n  if (opts.unset && opts.unset !== 'destroy' && opts.unset !== 'keep') {\r\n    throw new TypeError('unset option must be \"destroy\" or \"keep\"');\r\n  }\r\n\r\n  // TODO: switch to \"destroy\" on next major\r\n  var unsetDestroy = opts.unset === 'destroy'\r\n\r\n  if (Array.isArray(secret) && secret.length === 0) {\r\n    throw new TypeError('secret option array must contain one or more strings');\r\n  }\r\n\r\n  if (secret && !Array.isArray(secret)) {\r\n    secret = [secret];\r\n  }\r\n\r\n  if (!secret) {\r\n    deprecate('req.secret; provide secret option');\r\n  }\r\n\r\n  // notify user that this store is not\r\n  // meant for a production environment\r\n  /* istanbul ignore next: not tested */\r\n  if ('production' == env && store instanceof MemoryStore) {\r\n    console.warn(warning);\r\n  }\r\n\r\n  // generates the new session\r\n  store.generate = function(req){\r\n    req.sessionID = generateId(req);\r\n    req.session = new Session(req);\r\n    req.session.cookie = new Cookie(cookieOptions);\r\n\r\n    if (cookieOptions.secure === 'auto') {\r\n      req.session.cookie.secure = issecure(req, trustProxy);\r\n    }\r\n  };\r\n\r\n  var storeImplementsTouch = typeof store.touch === 'function';\r\n\r\n  // register event listeners for the store to track readiness\r\n  var storeReady = true\r\n  store.on('disconnect', function ondisconnect() {\r\n    storeReady = false\r\n  })\r\n  store.on('connect', function onconnect() {\r\n    storeReady = true\r\n  })\r\n\r\n  return function session(req, res, next) {\r\n    // self-awareness\r\n    if (req.session) {\r\n      next()\r\n      return\r\n    }\r\n\r\n    // Handle connection as if there is no session if\r\n    // the store has temporarily disconnected etc\r\n    if (!storeReady) {\r\n      debug('store is disconnected')\r\n      next()\r\n      return\r\n    }\r\n\r\n    // pathname mismatch\r\n    var originalPath = parseUrl.original(req).pathname;\r\n    if (originalPath.indexOf(cookieOptions.path || '/') !== 0) return next();\r\n\r\n    // ensure a secret is available or bail\r\n    if (!secret && !req.secret) {\r\n      next(new Error('secret option required for sessions'));\r\n      return;\r\n    }\r\n\r\n    // backwards compatibility for signed cookies\r\n    // req.secret is passed from the cookie parser middleware\r\n    var secrets = secret || [req.secret];\r\n\r\n    var originalHash;\r\n    var originalId;\r\n    var savedHash;\r\n    var touched = false\r\n\r\n    // expose store\r\n    req.sessionStore = store;\r\n\r\n    // get the session ID from the cookie\r\n    var cookieId = req.sessionID = getcookie(req, name, secrets);\r\n\r\n    // set-cookie\r\n    onHeaders(res, function(){\r\n      if (!req.session) {\r\n        debug('no session');\r\n        return;\r\n      }\r\n\r\n      if (!shouldSetCookie(req)) {\r\n        return;\r\n      }\r\n\r\n      // only send secure cookies via https\r\n      if (req.session.cookie.secure && !issecure(req, trustProxy)) {\r\n        debug('not secured');\r\n        return;\r\n      }\r\n\r\n      if (!touched) {\r\n        // touch session\r\n        req.session.touch()\r\n        touched = true\r\n      }\r\n\r\n      // set cookie\r\n      setcookie(res, name, req.sessionID, secrets[0], req.session.cookie.data);\r\n    });\r\n\r\n    // proxy end() to commit the session\r\n    var _end = res.end;\r\n    var _write = res.write;\r\n    var ended = false;\r\n    res.end = function end(chunk, encoding) {\r\n      if (ended) {\r\n        return false;\r\n      }\r\n\r\n      ended = true;\r\n\r\n      var ret;\r\n      var sync = true;\r\n\r\n      function writeend() {\r\n        if (sync) {\r\n          ret = _end.call(res, chunk, encoding);\r\n          sync = false;\r\n          return;\r\n        }\r\n\r\n        _end.call(res);\r\n      }\r\n\r\n      function writetop() {\r\n        if (!sync) {\r\n          return ret;\r\n        }\r\n\r\n        if (chunk == null) {\r\n          ret = true;\r\n          return ret;\r\n        }\r\n\r\n        var contentLength = Number(res.getHeader('Content-Length'));\r\n\r\n        if (!isNaN(contentLength) && contentLength > 0) {\r\n          // measure chunk\r\n          chunk = !Buffer.isBuffer(chunk)\r\n            ? new Buffer(chunk, encoding)\r\n            : chunk;\r\n          encoding = undefined;\r\n\r\n          if (chunk.length !== 0) {\r\n            debug('split response');\r\n            ret = _write.call(res, chunk.slice(0, chunk.length - 1));\r\n            chunk = chunk.slice(chunk.length - 1, chunk.length);\r\n            return ret;\r\n          }\r\n        }\r\n\r\n        ret = _write.call(res, chunk, encoding);\r\n        sync = false;\r\n\r\n        return ret;\r\n      }\r\n\r\n      if (shouldDestroy(req)) {\r\n        // destroy session\r\n        debug('destroying');\r\n        store.destroy(req.sessionID, function ondestroy(err) {\r\n          if (err) {\r\n            defer(next, err);\r\n          }\r\n\r\n          debug('destroyed');\r\n          writeend();\r\n        });\r\n\r\n        return writetop();\r\n      }\r\n\r\n      // no session to save\r\n      if (!req.session) {\r\n        debug('no session');\r\n        return _end.call(res, chunk, encoding);\r\n      }\r\n\r\n      if (!touched) {\r\n        // touch session\r\n        req.session.touch()\r\n        touched = true\r\n      }\r\n\r\n      if (shouldSave(req)) {\r\n        req.session.save(function onsave(err) {\r\n          if (err) {\r\n            defer(next, err);\r\n          }\r\n\r\n          writeend();\r\n        });\r\n\r\n        return writetop();\r\n      } else if (storeImplementsTouch && shouldTouch(req)) {\r\n        // store implements touch method\r\n        debug('touching');\r\n        store.touch(req.sessionID, req.session, function ontouch(err) {\r\n          if (err) {\r\n            defer(next, err);\r\n          }\r\n\r\n          debug('touched');\r\n          writeend();\r\n        });\r\n\r\n        return writetop();\r\n      }\r\n\r\n      return _end.call(res, chunk, encoding);\r\n    };\r\n\r\n    // generate the session\r\n    function generate() {\r\n      store.generate(req);\r\n      originalId = req.sessionID;\r\n      originalHash = hash(req.session);\r\n      wrapmethods(req.session);\r\n    }\r\n\r\n    // wrap session methods\r\n    function wrapmethods(sess) {\r\n      var _reload = sess.reload\r\n      var _save = sess.save;\r\n\r\n      function reload(callback) {\r\n        debug('reloading %s', this.id)\r\n        _reload.call(this, function () {\r\n          wrapmethods(req.session)\r\n          callback.apply(this, arguments)\r\n        })\r\n      }\r\n\r\n      function save() {\r\n        debug('saving %s', this.id);\r\n        savedHash = hash(this);\r\n        _save.apply(this, arguments);\r\n      }\r\n\r\n      Object.defineProperty(sess, 'reload', {\r\n        configurable: true,\r\n        enumerable: false,\r\n        value: reload,\r\n        writable: true\r\n      })\r\n\r\n      Object.defineProperty(sess, 'save', {\r\n        configurable: true,\r\n        enumerable: false,\r\n        value: save,\r\n        writable: true\r\n      });\r\n    }\r\n\r\n    // check if session has been modified\r\n    function isModified(sess) {\r\n      return originalId !== sess.id || originalHash !== hash(sess);\r\n    }\r\n\r\n    // check if session has been saved\r\n    function isSaved(sess) {\r\n      return originalId === sess.id && savedHash === hash(sess);\r\n    }\r\n\r\n    // determine if session should be destroyed\r\n    function shouldDestroy(req) {\r\n      return req.sessionID && unsetDestroy && req.session == null;\r\n    }\r\n\r\n    // determine if session should be saved to store\r\n    function shouldSave(req) {\r\n      // cannot set cookie without a session ID\r\n      if (typeof req.sessionID !== 'string') {\r\n        debug('session ignored because of bogus req.sessionID %o', req.sessionID);\r\n        return false;\r\n      }\r\n\r\n      return !saveUninitializedSession && cookieId !== req.sessionID\r\n        ? isModified(req.session)\r\n        : !isSaved(req.session)\r\n    }\r\n\r\n    // determine if session should be touched\r\n    function shouldTouch(req) {\r\n      // cannot set cookie without a session ID\r\n      if (typeof req.sessionID !== 'string') {\r\n        debug('session ignored because of bogus req.sessionID %o', req.sessionID);\r\n        return false;\r\n      }\r\n\r\n      return cookieId === req.sessionID && !shouldSave(req);\r\n    }\r\n\r\n    // determine if cookie should be set on response\r\n    function shouldSetCookie(req) {\r\n      // cannot set cookie without a session ID\r\n      if (typeof req.sessionID !== 'string') {\r\n        return false;\r\n      }\r\n\r\n      return cookieId != req.sessionID\r\n        ? saveUninitializedSession || isModified(req.session)\r\n        : rollingSessions || req.session.cookie.expires != null && isModified(req.session);\r\n    }\r\n\r\n    // generate a session if the browser doesn't send a sessionID\r\n    if (!req.sessionID) {\r\n      debug('no SID sent, generating session');\r\n      generate();\r\n      next();\r\n      return;\r\n    }\r\n\r\n    // generate the session object\r\n    debug('fetching %s', req.sessionID);\r\n    store.get(req.sessionID, function(err, sess){\r\n      // error handling\r\n      if (err) {\r\n        debug('error %j', err);\r\n\r\n        if (err.code !== 'ENOENT') {\r\n          next(err);\r\n          return;\r\n        }\r\n\r\n        generate();\r\n      // no session\r\n      } else if (!sess) {\r\n        debug('no session found');\r\n        generate();\r\n      // populate req.session\r\n      } else {\r\n        debug('session found');\r\n        store.createSession(req, sess);\r\n        originalId = req.sessionID;\r\n        originalHash = hash(sess);\r\n\r\n        if (!resaveSession) {\r\n          savedHash = originalHash\r\n        }\r\n\r\n        wrapmethods(req.session);\r\n      }\r\n\r\n      next();\r\n    });\r\n  };\r\n};\r\n\r\n/**\r\n * Generate a session ID for a new session.\r\n *\r\n * @return {String}\r\n * @private\r\n */\r\n\r\nfunction generateSessionId(sess) {\r\n  return uid(24);\r\n}\r\n\r\n/**\r\n * Get the session ID cookie from request.\r\n *\r\n * @return {string}\r\n * @private\r\n */\r\n\r\nfunction getcookie(req, name, secrets) {\r\n  var header = req.headers.cookie;\r\n  var raw;\r\n  var val;\r\n\r\n  // read from cookie header\r\n  if (header) {\r\n    var cookies = cookie.parse(header);\r\n\r\n    raw = cookies[name];\r\n\r\n    if (raw) {\r\n      if (raw.substr(0, 2) === 's:') {\r\n        val = unsigncookie(raw.slice(2), secrets);\r\n\r\n        if (val === false) {\r\n          debug('cookie signature invalid');\r\n          val = undefined;\r\n        }\r\n      } else {\r\n        debug('cookie unsigned')\r\n      }\r\n    }\r\n  }\r\n\r\n  // back-compat read from cookieParser() signedCookies data\r\n  if (!val && req.signedCookies) {\r\n    val = req.signedCookies[name];\r\n\r\n    if (val) {\r\n      deprecate('cookie should be available in req.headers.cookie');\r\n    }\r\n  }\r\n\r\n  // back-compat read from cookieParser() cookies data\r\n  if (!val && req.cookies) {\r\n    raw = req.cookies[name];\r\n\r\n    if (raw) {\r\n      if (raw.substr(0, 2) === 's:') {\r\n        val = unsigncookie(raw.slice(2), secrets);\r\n\r\n        if (val) {\r\n          deprecate('cookie should be available in req.headers.cookie');\r\n        }\r\n\r\n        if (val === false) {\r\n          debug('cookie signature invalid');\r\n          val = undefined;\r\n        }\r\n      } else {\r\n        debug('cookie unsigned')\r\n      }\r\n    }\r\n  }\r\n\r\n  return val;\r\n}\r\n\r\n/**\r\n * Hash the given `sess` object omitting changes to `.cookie`.\r\n *\r\n * @param {Object} sess\r\n * @return {String}\r\n * @private\r\n */\r\n\r\nfunction hash(sess) {\r\n  return crc(JSON.stringify(sess, function (key, val) {\r\n    // ignore sess.cookie property\r\n    if (this === sess && key === 'cookie') {\r\n      return\r\n    }\r\n\r\n    return val\r\n  }))\r\n}\r\n\r\n/**\r\n * Determine if request is secure.\r\n *\r\n * @param {Object} req\r\n * @param {Boolean} [trustProxy]\r\n * @return {Boolean}\r\n * @private\r\n */\r\n\r\nfunction issecure(req, trustProxy) {\r\n  // socket is https server\r\n  if (req.connection && req.connection.encrypted) {\r\n    return true;\r\n  }\r\n\r\n  // do not trust proxy\r\n  if (trustProxy === false) {\r\n    return false;\r\n  }\r\n\r\n  // no explicit trust; try req.secure from express\r\n  if (trustProxy !== true) {\r\n    var secure = req.secure;\r\n    return typeof secure === 'boolean'\r\n      ? secure\r\n      : false;\r\n  }\r\n\r\n  // read the proto from x-forwarded-proto header\r\n  var header = req.headers['x-forwarded-proto'] || '';\r\n  var index = header.indexOf(',');\r\n  var proto = index !== -1\r\n    ? header.substr(0, index).toLowerCase().trim()\r\n    : header.toLowerCase().trim()\r\n\r\n  return proto === 'https';\r\n}\r\n\r\n/**\r\n * Set cookie on response.\r\n *\r\n * @private\r\n */\r\n\r\nfunction setcookie(res, name, val, secret, options) {\r\n  var signed = 's:' + signature.sign(val, secret);\r\n  var data = cookie.serialize(name, signed, options);\r\n\r\n  debug('set-cookie %s', data);\r\n\r\n  var prev = res.getHeader('set-cookie') || [];\r\n  var header = Array.isArray(prev) ? prev.concat(data) : [prev, data];\r\n\r\n  res.setHeader('set-cookie', header)\r\n}\r\n\r\n/**\r\n * Verify and decode the given `val` with `secrets`.\r\n *\r\n * @param {String} val\r\n * @param {Array} secrets\r\n * @returns {String|Boolean}\r\n * @private\r\n */\r\nfunction unsigncookie(val, secrets) {\r\n  for (var i = 0; i < secrets.length; i++) {\r\n    var result = signature.unsign(val, secrets[i]);\r\n\r\n    if (result !== false) {\r\n      return result;\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-express-session/node_modules/express-session/session/session.js":"/*!\r\n * Connect - session - Session\r\n * Copyright(c) 2010 Sencha Inc.\r\n * Copyright(c) 2011 TJ Holowaychuk\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * Expose Session.\r\n */\r\n\r\nmodule.exports = Session;\r\n\r\n/**\r\n * Create a new `Session` with the given request and `data`.\r\n *\r\n * @param {IncomingRequest} req\r\n * @param {Object} data\r\n * @api private\r\n */\r\n\r\nfunction Session(req, data) {\r\n  Object.defineProperty(this, 'req', { value: req });\r\n  Object.defineProperty(this, 'id', { value: req.sessionID });\r\n\r\n  if (typeof data === 'object' && data !== null) {\r\n    // merge data into this, ignoring prototype properties\r\n    for (var prop in data) {\r\n      if (!(prop in this)) {\r\n        this[prop] = data[prop]\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Update reset `.cookie.maxAge` to prevent\r\n * the cookie from expiring when the\r\n * session is still active.\r\n *\r\n * @return {Session} for chaining\r\n * @api public\r\n */\r\n\r\ndefineMethod(Session.prototype, 'touch', function touch() {\r\n  return this.resetMaxAge();\r\n});\r\n\r\n/**\r\n * Reset `.maxAge` to `.originalMaxAge`.\r\n *\r\n * @return {Session} for chaining\r\n * @api public\r\n */\r\n\r\ndefineMethod(Session.prototype, 'resetMaxAge', function resetMaxAge() {\r\n  this.cookie.maxAge = this.cookie.originalMaxAge;\r\n  return this;\r\n});\r\n\r\n/**\r\n * Save the session data with optional callback `fn(err)`.\r\n *\r\n * @param {Function} fn\r\n * @return {Session} for chaining\r\n * @api public\r\n */\r\n\r\ndefineMethod(Session.prototype, 'save', function save(fn) {\r\n  this.req.sessionStore.set(this.id, this, fn || function(){});\r\n  return this;\r\n});\r\n\r\n/**\r\n * Re-loads the session data _without_ altering\r\n * the maxAge properties. Invokes the callback `fn(err)`,\r\n * after which time if no exception has occurred the\r\n * `req.session` property will be a new `Session` object,\r\n * although representing the same session.\r\n *\r\n * @param {Function} fn\r\n * @return {Session} for chaining\r\n * @api public\r\n */\r\n\r\ndefineMethod(Session.prototype, 'reload', function reload(fn) {\r\n  var req = this.req\r\n    , store = this.req.sessionStore;\r\n  store.get(this.id, function(err, sess){\r\n    if (err) return fn(err);\r\n    if (!sess) return fn(new Error('failed to load session'));\r\n    store.createSession(req, sess);\r\n    fn();\r\n  });\r\n  return this;\r\n});\r\n\r\n/**\r\n * Destroy `this` session.\r\n *\r\n * @param {Function} fn\r\n * @return {Session} for chaining\r\n * @api public\r\n */\r\n\r\ndefineMethod(Session.prototype, 'destroy', function destroy(fn) {\r\n  delete this.req.session;\r\n  this.req.sessionStore.destroy(this.id, fn);\r\n  return this;\r\n});\r\n\r\n/**\r\n * Regenerate this request's session.\r\n *\r\n * @param {Function} fn\r\n * @return {Session} for chaining\r\n * @api public\r\n */\r\n\r\ndefineMethod(Session.prototype, 'regenerate', function regenerate(fn) {\r\n  this.req.sessionStore.regenerate(this.req, fn);\r\n  return this;\r\n});\r\n\r\n/**\r\n * Helper function for creating a method on a prototype.\r\n *\r\n * @param {Object} obj\r\n * @param {String} name\r\n * @param {Function} fn\r\n * @private\r\n */\r\nfunction defineMethod(obj, name, fn) {\r\n  Object.defineProperty(obj, name, {\r\n    configurable: true,\r\n    enumerable: false,\r\n    value: fn,\r\n    writable: true\r\n  });\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-express-session/node_modules/express-session/session/memory.js":"/*!\r\n * express-session\r\n * Copyright(c) 2010 Sencha Inc.\r\n * Copyright(c) 2011 TJ Holowaychuk\r\n * Copyright(c) 2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar Store = require('./store')\r\nvar util = require('util')\r\n\r\n/**\r\n * Shim setImmediate for node.js < 0.10\r\n * @private\r\n */\r\n\r\n/* istanbul ignore next */\r\nvar defer = typeof setImmediate === 'function'\r\n  ? setImmediate\r\n  : function(fn){ process.nextTick(fn.bind.apply(fn, arguments)) }\r\n\r\n/**\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = MemoryStore\r\n\r\n/**\r\n * A session store in memory.\r\n * @public\r\n */\r\n\r\nfunction MemoryStore() {\r\n  Store.call(this)\r\n  this.sessions = Object.create(null)\r\n}\r\n\r\n/**\r\n * Inherit from Store.\r\n */\r\n\r\nutil.inherits(MemoryStore, Store)\r\n\r\n/**\r\n * Get all active sessions.\r\n *\r\n * @param {function} callback\r\n * @public\r\n */\r\n\r\nMemoryStore.prototype.all = function all(callback) {\r\n  var sessionIds = Object.keys(this.sessions)\r\n  var sessions = Object.create(null)\r\n\r\n  for (var i = 0; i < sessionIds.length; i++) {\r\n    var sessionId = sessionIds[i]\r\n    var session = getSession.call(this, sessionId)\r\n\r\n    if (session) {\r\n      sessions[sessionId] = session;\r\n    }\r\n  }\r\n\r\n  callback && defer(callback, null, sessions)\r\n}\r\n\r\n/**\r\n * Clear all sessions.\r\n *\r\n * @param {function} callback\r\n * @public\r\n */\r\n\r\nMemoryStore.prototype.clear = function clear(callback) {\r\n  this.sessions = Object.create(null)\r\n  callback && defer(callback)\r\n}\r\n\r\n/**\r\n * Destroy the session associated with the given session ID.\r\n *\r\n * @param {string} sessionId\r\n * @public\r\n */\r\n\r\nMemoryStore.prototype.destroy = function destroy(sessionId, callback) {\r\n  delete this.sessions[sessionId]\r\n  callback && defer(callback)\r\n}\r\n\r\n/**\r\n * Fetch session by the given session ID.\r\n *\r\n * @param {string} sessionId\r\n * @param {function} callback\r\n * @public\r\n */\r\n\r\nMemoryStore.prototype.get = function get(sessionId, callback) {\r\n  defer(callback, null, getSession.call(this, sessionId))\r\n}\r\n\r\n/**\r\n * Commit the given session associated with the given sessionId to the store.\r\n *\r\n * @param {string} sessionId\r\n * @param {object} session\r\n * @param {function} callback\r\n * @public\r\n */\r\n\r\nMemoryStore.prototype.set = function set(sessionId, session, callback) {\r\n  this.sessions[sessionId] = JSON.stringify(session)\r\n  callback && defer(callback)\r\n}\r\n\r\n/**\r\n * Get number of active sessions.\r\n *\r\n * @param {function} callback\r\n * @public\r\n */\r\n\r\nMemoryStore.prototype.length = function length(callback) {\r\n  this.all(function (err, sessions) {\r\n    if (err) return callback(err)\r\n    callback(null, Object.keys(sessions).length)\r\n  })\r\n}\r\n\r\n/**\r\n * Touch the given session object associated with the given session ID.\r\n *\r\n * @param {string} sessionId\r\n * @param {object} session\r\n * @param {function} callback\r\n * @public\r\n */\r\n\r\nMemoryStore.prototype.touch = function touch(sessionId, session, callback) {\r\n  var currentSession = getSession.call(this, sessionId)\r\n\r\n  if (currentSession) {\r\n    // update expiration\r\n    currentSession.cookie = session.cookie\r\n    this.sessions[sessionId] = JSON.stringify(currentSession)\r\n  }\r\n\r\n  callback && defer(callback)\r\n}\r\n\r\n/**\r\n * Get session from the store.\r\n * @private\r\n */\r\n\r\nfunction getSession(sessionId) {\r\n  var sess = this.sessions[sessionId]\r\n\r\n  if (!sess) {\r\n    return\r\n  }\r\n\r\n  // parse\r\n  sess = JSON.parse(sess)\r\n\r\n  var expires = typeof sess.cookie.expires === 'string'\r\n    ? new Date(sess.cookie.expires)\r\n    : sess.cookie.expires\r\n\r\n  // destroy expired session\r\n  if (expires && expires <= Date.now()) {\r\n    delete this.sessions[sessionId]\r\n    return\r\n  }\r\n\r\n  return sess\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-express-session/node_modules/express-session/session/store.js":"/*!\r\n * Connect - session - Store\r\n * Copyright(c) 2010 Sencha Inc.\r\n * Copyright(c) 2011 TJ Holowaychuk\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar Cookie = require('./cookie')\r\nvar EventEmitter = require('events').EventEmitter\r\nvar Session = require('./session')\r\nvar util = require('util')\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = Store\r\n\r\n/**\r\n * Abstract base class for session stores.\r\n * @public\r\n */\r\n\r\nfunction Store () {\r\n  EventEmitter.call(this)\r\n}\r\n\r\n/**\r\n * Inherit from EventEmitter.\r\n */\r\n\r\nutil.inherits(Store, EventEmitter)\r\n\r\n/**\r\n * Re-generate the given requests's session.\r\n *\r\n * @param {IncomingRequest} req\r\n * @return {Function} fn\r\n * @api public\r\n */\r\n\r\nStore.prototype.regenerate = function(req, fn){\r\n  var self = this;\r\n  this.destroy(req.sessionID, function(err){\r\n    self.generate(req);\r\n    fn(err);\r\n  });\r\n};\r\n\r\n/**\r\n * Load a `Session` instance via the given `sid`\r\n * and invoke the callback `fn(err, sess)`.\r\n *\r\n * @param {String} sid\r\n * @param {Function} fn\r\n * @api public\r\n */\r\n\r\nStore.prototype.load = function(sid, fn){\r\n  var self = this;\r\n  this.get(sid, function(err, sess){\r\n    if (err) return fn(err);\r\n    if (!sess) return fn();\r\n    var req = { sessionID: sid, sessionStore: self };\r\n    fn(null, self.createSession(req, sess))\r\n  });\r\n};\r\n\r\n/**\r\n * Create session from JSON `sess` data.\r\n *\r\n * @param {IncomingRequest} req\r\n * @param {Object} sess\r\n * @return {Session}\r\n * @api private\r\n */\r\n\r\nStore.prototype.createSession = function(req, sess){\r\n  var expires = sess.cookie.expires\r\n    , orig = sess.cookie.originalMaxAge;\r\n  sess.cookie = new Cookie(sess.cookie);\r\n  if ('string' == typeof expires) sess.cookie.expires = new Date(expires);\r\n  sess.cookie.originalMaxAge = orig;\r\n  req.session = new Session(req, sess);\r\n  return req.session;\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-express-session/node_modules/express-session/session/cookie.js":"/*!\r\n * Connect - session - Cookie\r\n * Copyright(c) 2010 Sencha Inc.\r\n * Copyright(c) 2011 TJ Holowaychuk\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar merge = require('utils-merge')\r\n  , cookie = require('cookie');\r\n\r\n/**\r\n * Initialize a new `Cookie` with the given `options`.\r\n *\r\n * @param {IncomingMessage} req\r\n * @param {Object} options\r\n * @api private\r\n */\r\n\r\nvar Cookie = module.exports = function Cookie(options) {\r\n  this.path = '/';\r\n  this.maxAge = null;\r\n  this.httpOnly = true;\r\n  if (options) merge(this, options);\r\n  this.originalMaxAge = undefined == this.originalMaxAge\r\n    ? this.maxAge\r\n    : this.originalMaxAge;\r\n};\r\n\r\n/*!\r\n * Prototype.\r\n */\r\n\r\nCookie.prototype = {\r\n\r\n  /**\r\n   * Set expires `date`.\r\n   *\r\n   * @param {Date} date\r\n   * @api public\r\n   */\r\n\r\n  set expires(date) {\r\n    this._expires = date;\r\n    this.originalMaxAge = this.maxAge;\r\n  },\r\n\r\n  /**\r\n   * Get expires `date`.\r\n   *\r\n   * @return {Date}\r\n   * @api public\r\n   */\r\n\r\n  get expires() {\r\n    return this._expires;\r\n  },\r\n\r\n  /**\r\n   * Set expires via max-age in `ms`.\r\n   *\r\n   * @param {Number} ms\r\n   * @api public\r\n   */\r\n\r\n  set maxAge(ms) {\r\n    this.expires = 'number' == typeof ms\r\n      ? new Date(Date.now() + ms)\r\n      : ms;\r\n  },\r\n\r\n  /**\r\n   * Get expires max-age in `ms`.\r\n   *\r\n   * @return {Number}\r\n   * @api public\r\n   */\r\n\r\n  get maxAge() {\r\n    return this.expires instanceof Date\r\n      ? this.expires.valueOf() - Date.now()\r\n      : this.expires;\r\n  },\r\n\r\n  /**\r\n   * Return cookie data object.\r\n   *\r\n   * @return {Object}\r\n   * @api private\r\n   */\r\n\r\n  get data() {\r\n    return {\r\n        originalMaxAge: this.originalMaxAge\r\n      , expires: this._expires\r\n      , secure: this.secure\r\n      , httpOnly: this.httpOnly\r\n      , domain: this.domain\r\n      , path: this.path\r\n      , sameSite: this.sameSite\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Return a serialized cookie string.\r\n   *\r\n   * @return {String}\r\n   * @api public\r\n   */\r\n\r\n  serialize: function(name, val){\r\n    return cookie.serialize(name, val, this.data);\r\n  },\r\n\r\n  /**\r\n   * Return JSON representation of this cookie.\r\n   *\r\n   * @return {Object}\r\n   * @api private\r\n   */\r\n\r\n  toJSON: function(){\r\n    return this.data;\r\n  }\r\n};\r\n"}